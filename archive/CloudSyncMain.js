import * as fs from "fs";
import * as path from "path";
import { LocalFileManager } from "./LocalFileManager";
import { AzureFileManager } from "./AzureFileManager";
import { Synchronize } from "./Synchronize";
import { S3FileManager } from "./AwsFileManager";
import { GCPFileManager } from "./GcpFileManager";
import { promisify } from "util";
export const readFileAsync = promisify(fs.readFile);
export const writeFileAsync = promisify(fs.writeFile);
export const unlinkAsync = promisify(fs.unlink);
export const readdirAsync = promisify(fs.readdir);
export const statAsync = promisify(fs.stat);
export class CloudSync {
    constructor(app, settings) {
        var _a, _b, _c;
        this.app = app;
        this.settings = settings;
        //console.log(this.app.vault.adapter.basePath)
        //@ ts - ignore
        const localDir = this.app.vault.adapter.basePath;
        const vaultName = encodeURIComponent(path.basename(localDir));
        this.localVault = new LocalFileManager(localDir, this.settings.syncIgnore);
        if (((_a = this.settings) === null || _a === void 0 ? void 0 : _a.cloudProvider) == "aws") {
            this.remoteVault = new S3FileManager(this.settings.aws.accessKey, this.settings.aws.secretKey, this.settings.aws.bucket, this.settings.aws.region);
        }
        else if (((_b = this.settings) === null || _b === void 0 ? void 0 : _b.cloudProvider) == "gcp") {
            this.remoteVault = new GCPFileManager(this.settings.gcp.privateKey, this.settings.gcp.clientEmail, this.settings.gcp.bucket);
        }
        else if (((_c = this.settings) === null || _c === void 0 ? void 0 : _c.cloudProvider) == "azure") {
            this.remoteVault = new AzureFileManager(this.settings.azure.account, this.settings.azure.accessKey, vaultName);
        }
        else {
            console.error(`Invalid target`);
            return;
        }
        this.synchronizer = new Synchronize(this.localVault, this.remoteVault);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ2xvdWRTeW5jTWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNsb3VkU3luY01haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxLQUFLLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDekIsT0FBTyxLQUFLLElBQUksTUFBTSxNQUFNLENBQUM7QUFDN0IsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDdEQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDdEQsT0FBTyxFQUFFLFdBQVcsRUFBa0IsTUFBTSxlQUFlLENBQUM7QUFDNUQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUVsRCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBR2pDLE1BQU0sQ0FBQyxNQUFNLGFBQWEsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ3BELE1BQU0sQ0FBQyxNQUFNLGNBQWMsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ3RELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2hELE1BQU0sQ0FBQyxNQUFNLFlBQVksR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2xELE1BQU0sQ0FBQyxNQUFNLFNBQVMsR0FBRyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRTVDLE1BQU0sT0FBTyxTQUFTO0lBUXBCLFlBQVksR0FBUSxFQUFFLFFBQWE7O1FBQ2pDLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2YsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUE7UUFFeEIsOENBQThDO1FBRTlDLGVBQWU7UUFDZixNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFDO1FBQ2pELE1BQU0sU0FBUyxHQUFHLGtCQUFrQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUU5RCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksZ0JBQWdCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7UUFFM0UsSUFBSSxDQUFBLE1BQUEsSUFBSSxDQUFDLFFBQVEsMENBQUUsYUFBYSxLQUFJLEtBQUssRUFBRSxDQUFDO1lBQzFDLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxhQUFhLENBQ2xDLElBQUksQ0FBQyxRQUFTLENBQUMsR0FBRyxDQUFDLFNBQVMsRUFDNUIsSUFBSSxDQUFDLFFBQVMsQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUM1QixJQUFJLENBQUMsUUFBUyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQ3pCLElBQUksQ0FBQyxRQUFTLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FDMUIsQ0FBQztRQUNKLENBQUM7YUFBTSxJQUFJLENBQUEsTUFBQSxJQUFJLENBQUMsUUFBUSwwQ0FBRSxhQUFhLEtBQUksS0FBSyxFQUFFLENBQUM7WUFDakQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGNBQWMsQ0FDbkMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUM1QixJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQzdCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FDekIsQ0FBQztRQUNKLENBQUM7YUFBTSxJQUFJLENBQUEsTUFBQSxJQUFJLENBQUMsUUFBUSwwQ0FBRSxhQUFhLEtBQUksT0FBTyxFQUFFLENBQUM7WUFDbkQsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLGdCQUFnQixDQUNyQyxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxPQUFPLEVBQzNCLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFNBQVMsRUFDN0IsU0FBUyxDQUNWLENBQUM7UUFDSixDQUFDO2FBQU0sQ0FBQztZQUNOLE9BQU8sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUNoQyxPQUFPO1FBQ1QsQ0FBQztRQUNELElBQUksQ0FBQyxZQUFZLEdBQUcsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDekUsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgZnMgZnJvbSBcImZzXCI7XHJcbmltcG9ydCAqIGFzIHBhdGggZnJvbSBcInBhdGhcIjtcclxuaW1wb3J0IHsgTG9jYWxGaWxlTWFuYWdlciB9IGZyb20gXCIuL0xvY2FsRmlsZU1hbmFnZXJcIjtcclxuaW1wb3J0IHsgQXp1cmVGaWxlTWFuYWdlciB9IGZyb20gXCIuL0F6dXJlRmlsZU1hbmFnZXJcIjtcclxuaW1wb3J0IHsgU3luY2hyb25pemUsIFN5bmNSdWxlLCBGaWxlIH0gZnJvbSBcIi4vU3luY2hyb25pemVcIjtcclxuaW1wb3J0IHsgUzNGaWxlTWFuYWdlciB9IGZyb20gXCIuL0F3c0ZpbGVNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IEdDUEZpbGVNYW5hZ2VyIH0gZnJvbSBcIi4vR2NwRmlsZU1hbmFnZXJcIjtcclxuaW1wb3J0IHsgRmlsZU1hbmFnZXIgfSBmcm9tIFwiLi9BYnN0cmFjdEZpbGVNYW5hZ2VyXCI7XHJcbmltcG9ydCB7IHByb21pc2lmeSB9IGZyb20gXCJ1dGlsXCI7XHJcbmltcG9ydCB7IENsb3VkU3luY1NldHRpbmdzIH0gZnJvbSBcIi4vbWFpblwiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlYWRGaWxlQXN5bmMgPSBwcm9taXNpZnkoZnMucmVhZEZpbGUpO1xyXG5leHBvcnQgY29uc3Qgd3JpdGVGaWxlQXN5bmMgPSBwcm9taXNpZnkoZnMud3JpdGVGaWxlKTtcclxuZXhwb3J0IGNvbnN0IHVubGlua0FzeW5jID0gcHJvbWlzaWZ5KGZzLnVubGluayk7XHJcbmV4cG9ydCBjb25zdCByZWFkZGlyQXN5bmMgPSBwcm9taXNpZnkoZnMucmVhZGRpcik7XHJcbmV4cG9ydCBjb25zdCBzdGF0QXN5bmMgPSBwcm9taXNpZnkoZnMuc3RhdCk7XHJcblxyXG5leHBvcnQgY2xhc3MgQ2xvdWRTeW5jIHtcclxuICBwdWJsaWMgbG9jYWxWYXVsdDogTG9jYWxGaWxlTWFuYWdlcjtcclxuICBwdWJsaWMgcmVtb3RlVmF1bHQ6IEZpbGVNYW5hZ2VyO1xyXG4gIHB1YmxpYyBzeW5jaHJvbml6ZXI6IFN5bmNocm9uaXplO1xyXG5cclxuICBwcml2YXRlIHNldHRpbmdzOiBDbG91ZFN5bmNTZXR0aW5ncztcclxuICBwcml2YXRlIGFwcDogYW55O1xyXG5cclxuICBjb25zdHJ1Y3RvcihhcHA6IGFueSwgc2V0dGluZ3M6IGFueSkge1xyXG4gICAgdGhpcy5hcHAgPSBhcHA7XHJcbiAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3NcclxuXHJcbiAgICAvL2NvbnNvbGUubG9nKHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIuYmFzZVBhdGgpXHJcblxyXG4gICAgLy9AIHRzIC0gaWdub3JlXHJcbiAgICBjb25zdCBsb2NhbERpciA9IHRoaXMuYXBwLnZhdWx0LmFkYXB0ZXIuYmFzZVBhdGg7XHJcbiAgICBjb25zdCB2YXVsdE5hbWUgPSBlbmNvZGVVUklDb21wb25lbnQocGF0aC5iYXNlbmFtZShsb2NhbERpcikpO1xyXG5cclxuICAgIHRoaXMubG9jYWxWYXVsdCA9IG5ldyBMb2NhbEZpbGVNYW5hZ2VyKGxvY2FsRGlyLCB0aGlzLnNldHRpbmdzLnN5bmNJZ25vcmUpO1xyXG5cclxuICAgIGlmICh0aGlzLnNldHRpbmdzPy5jbG91ZFByb3ZpZGVyID09IFwiYXdzXCIpIHtcclxuICAgICAgdGhpcy5yZW1vdGVWYXVsdCA9IG5ldyBTM0ZpbGVNYW5hZ2VyKFxyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MhLmF3cy5hY2Nlc3NLZXksXHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncyEuYXdzLnNlY3JldEtleSxcclxuICAgICAgICB0aGlzLnNldHRpbmdzIS5hd3MuYnVja2V0LFxyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MhLmF3cy5yZWdpb25cclxuICAgICAgKTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5zZXR0aW5ncz8uY2xvdWRQcm92aWRlciA9PSBcImdjcFwiKSB7XHJcbiAgICAgIHRoaXMucmVtb3RlVmF1bHQgPSBuZXcgR0NQRmlsZU1hbmFnZXIoXHJcbiAgICAgICAgdGhpcy5zZXR0aW5ncy5nY3AucHJpdmF0ZUtleSxcclxuICAgICAgICB0aGlzLnNldHRpbmdzLmdjcC5jbGllbnRFbWFpbCxcclxuICAgICAgICB0aGlzLnNldHRpbmdzLmdjcC5idWNrZXRcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSBpZiAodGhpcy5zZXR0aW5ncz8uY2xvdWRQcm92aWRlciA9PSBcImF6dXJlXCIpIHtcclxuICAgICAgdGhpcy5yZW1vdGVWYXVsdCA9IG5ldyBBenVyZUZpbGVNYW5hZ2VyKFxyXG4gICAgICAgIHRoaXMuc2V0dGluZ3MuYXp1cmUuYWNjb3VudCxcclxuICAgICAgICB0aGlzLnNldHRpbmdzLmF6dXJlLmFjY2Vzc0tleSxcclxuICAgICAgICB2YXVsdE5hbWVcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoYEludmFsaWQgdGFyZ2V0YCk7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuc3luY2hyb25pemVyID0gbmV3IFN5bmNocm9uaXplKHRoaXMubG9jYWxWYXVsdCwgdGhpcy5yZW1vdGVWYXVsdCk7XHJcbiAgfVxyXG59XHJcbiJdfQ==